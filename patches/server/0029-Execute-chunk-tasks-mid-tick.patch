From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Mon, 6 Apr 2020 04:20:44 -0700
Subject: [PATCH] Execute chunk tasks mid-tick

This will help the server load chunks if tick times are high.

diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 69e26a8267885fa0b0310a5386718bff1dfb2ecc..3586c164bdb6762572f8499057fcf5627c765d56 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -42,6 +42,8 @@ public final class MinecraftTimings {
     public static final Timing antiXrayUpdateTimer = Timings.ofSafe("anti-xray - update");
     public static final Timing antiXrayObfuscateTimer = Timings.ofSafe("anti-xray - obfuscate");
 
+    public static final Timing midTickChunkTasks = Timings.ofSafe("Mid-Tick Chunk Tasks");
+
     private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
 
     private MinecraftTimings() {}
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index d3acb6f0767ec7c2e3d1a7c41a23d4ea66b1307f..88a62ebb09297165fc6a4b01c00a41175d4e28f5 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -803,6 +803,12 @@ public class ChunkProviderServer extends IChunkProvider {
                         this.world.timings.chunkTicks.startTiming(); // Spigot // Paper
                         this.world.a(chunk, k);
                         this.world.timings.chunkTicks.stopTiming(); // Spigot // Paper
+
+                        // Tuinity start - exec chunk tasks during world tick
+                        if ((chunk.getPos().pair() & 7) <= 1) { // crude but good enough random check, don't want to run the below too many times...
+                            this.world.executeAllChunkTasks();
+                        }
+                        // Tuinity end - exec chunk tasks during world tick
                     }
                 }
             });
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 6d34f487eaaa022d3884ba44fe3a962cd914ecb4..b5a208945115d421c1e7a315ea43fdfb105261db 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -813,6 +813,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                     }
                     // Spigot end
                 }
+                ((WorldServer)this).executeAllChunkTasks(); // Tuinity - exec chunk tasks during world tick
             }
 
             if (tileentity.isRemoved()) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index d7f4199911ffb65d95fe0cb4671ea030c6eb9881..2cb38d36c7404a83a514ad413bc5709b56679fec 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import co.aikar.timings.MinecraftTimings;
 import com.google.common.annotations.VisibleForTesting;
 import co.aikar.timings.TimingHistory; // Paper
 import co.aikar.timings.Timings; // Paper
@@ -22,6 +23,7 @@ import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Files;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -196,6 +198,56 @@ public class WorldServer extends World {
     }
     // Tuinity end - Optimize entity list iteration requiring entities be in loaded chunks
 
+    // Tuinity start - execute chunk tasks mid tick
+    static final long CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME = 25L * 1000L; // 50us
+    static final long MAX_CHUNK_EXEC_TIME = 2L * 500L; // 5us
+    static final double MAX_PERCENT_USAGE_CHUNK_TASK = (double)MAX_CHUNK_EXEC_TIME/(double)CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME;
+
+    static final long TASK_EXECUTION_FAILURE_BACKOFF = 2L * 1000L; // 1us
+
+    private static long lastExecuteAllTime;
+    private static long lastExecuteAllFailure;
+
+    final void executeAllChunkTasks() {
+        long startTime = System.nanoTime();
+        if ((startTime - lastExecuteAllTime) <= CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME || (startTime - lastExecuteAllFailure) <= TASK_EXECUTION_FAILURE_BACKOFF) {
+            // it's shown to be bad to constantly hit the queue (chunk loads slow to a crawl), even if no tasks are executed.
+            // so, backoff to prevent this
+            return;
+        }
+
+        MinecraftTimings.midTickChunkTasks.startTiming();
+        try {
+            ChunkProviderServer chunkProviderServer = this.getChunkProvider();
+            for (;;) {
+                boolean moreTasks = chunkProviderServer.runTasks();
+                long currTime = System.nanoTime();
+                long diff = currTime - startTime;
+
+                if (!moreTasks || diff >= MAX_CHUNK_EXEC_TIME) {
+                    if (!moreTasks) {
+                        lastExecuteAllFailure = currTime;
+                    }
+
+                    // note: negative values reduce the time
+                    long overuse = diff - MAX_CHUNK_EXEC_TIME;
+                    if (overuse >= (10L * 1000L * 1000L * 1000L)) { // 10ms
+                        overuse = 10L * 1000L * 1000L * 1000L;
+                    }
+
+                    double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
+                    long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+
+                    lastExecuteAllTime = currTime + extraSleep;
+                    return;
+                }
+            }
+        } finally {
+            MinecraftTimings.midTickChunkTasks.stopTiming();;
+        }
+    }
+    // Tuinity end - execute chunk tasks mid tick
+
     // Add env and gen to constructor
     public WorldServer(MinecraftServer minecraftserver, Executor executor, WorldNBTStorage worldnbtstorage, WorldData worlddata, DimensionManager dimensionmanager, GameProfilerFiller gameprofilerfiller, WorldLoadListener worldloadlistener, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
         super(worlddata, dimensionmanager, (world, worldprovider) -> {
@@ -520,6 +572,7 @@ public class WorldServer extends World {
                 gameprofilerfiller.enter("tick");
                 if (!entity1.dead && !(entity1 instanceof EntityComplexPart)) {
                     this.a(this::entityJoinedWorld, entity1);
+                    this.executeAllChunkTasks(); // Tuinity - exec chunk tasks during world tick
                 }
 
                 gameprofilerfiller.exit();
