From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Sun, 5 Apr 2020 06:16:09 -0700
Subject: [PATCH] Use distance map to optimise entity tracker

Use the distance map to find candidate players for tracking.

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index a2261114f2b7512b5a86d02e98e139c70a2a75c8..f7620024fad98b6ae4f52059d8eafa467dfaa08b 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -252,6 +252,18 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
     // Tuinity end
 
+    // Tuinity start - optimise entity tracking
+    final org.spigotmc.TrackingRange.TrackingRangeType trackingRangeType = org.spigotmc.TrackingRange.getTrackingRangeType(this);
+
+    boolean isLegacyTrackingEntity = false;
+
+    public final void setLegacyTrackingEntity(final boolean isLegacyTrackingEntity) {
+        this.isLegacyTrackingEntity = isLegacyTrackingEntity;
+    }
+
+    com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> playersInTrackRange;
+    // Tuinity end - optimise entity tracking
+
     public Entity(EntityTypes<?> entitytypes, World world) {
         this.id = Entity.entityCount.incrementAndGet();
         this.passengers = Lists.newArrayList();
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 40d6e8bf7c34d91bbc44d23efc498daa4f61b7e2..33fe5bcc9067987a5fcdc3345e72cfded7c226ef 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -70,6 +70,7 @@ public class EntityTrackerEntry {
         this.r = entity.onGround;
     }
 
+    public final void tick() { this.a(); } // Tuinity - OBFHELPER
     public void a() {
         com.tuinity.tuinity.util.TickThread.softEnsureTickThread("Tracker update"); // Tuinity
         List<Entity> list = this.tracker.getPassengers();
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 937ccaba4a9f645bbf47263734a37c003de5bc33..ab85437c2d212d78b4505b4088fee5bd7df0782e 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -146,6 +146,16 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Tuinity start - optimise PlayerChunkMap#isOutsideRange
         this.playerChunkTickRangeMap.update(player, chunkX, chunkZ, ChunkMapDistance.MOB_SPAWN_RANGE);
         // Tuinity end - optimise PlayerChunkMap#isOutsideRange
+
+        // Tuinity start - use distance map to optimise entity tracker
+        // force propagate tracker changes
+        for (int i = 0, len = TRACKING_RANGE_TYPES.length; i < len; ++i) {
+            com.tuinity.tuinity.util.map.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
+            int trackRange = this.entityTrackerTrackRanges[i];
+
+            trackMap.update(player, chunkX, chunkZ, Math.min(trackRange, effectiveViewDistance));
+        }
+        // Tuinity end - use distance map to optimise entity tracker
     }
 
     final class ChunkSendThrottler {
@@ -370,6 +380,17 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     public static final int PLAYER_GENERAL_AREA_MAP_DISTANCE_SQUARED_BLOCKS = (16 * PLAYER_GENERAL_AREA_MAP_DISTANCE) * (16 * PLAYER_GENERAL_AREA_MAP_DISTANCE);
     // Tuinity end - optimise getPlayersInRange type functions
 
+    // Tuinity start - use distance map to optimise tracker
+    public static boolean isLegacyTrackingEntity(Entity entity) {
+        return entity.isLegacyTrackingEntity;
+    }
+
+    // inlined EnumMap, TrackingRange.TrackingRangeType
+    static final org.spigotmc.TrackingRange.TrackingRangeType[] TRACKING_RANGE_TYPES = org.spigotmc.TrackingRange.TrackingRangeType.values();
+    final com.tuinity.tuinity.util.map.PlayerAreaMap[] playerEntityTrackerTrackMaps;
+    final int[] entityTrackerTrackRanges;
+    // Tuinity end - use distance map to optimise tracker
+
     void addPlayerToDistanceMaps(EntityPlayer player) {
         this.updateMaps(player);
 
@@ -426,6 +447,12 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Tuinity start - optimise getPlayersInRange type functions
         this.playerGeneralAreaMap.remove(player);
         // Tuinity end - optimise getPlayersInRange type functions
+
+        // Tuinity start - use distance map to optimise tracker
+        for (com.tuinity.tuinity.util.map.PlayerAreaMap trackMap : this.playerEntityTrackerTrackMaps) {
+            trackMap.remove(player);
+        }
+        // Tuinity end - use distance map to optimise tracker
     }
 
     void updateDistanceMapsTuinity(EntityPlayer player) {
@@ -458,41 +485,19 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Tuinity start - optimise getPlayersInRange type functions
         this.playerGeneralAreaMap.update(player, chunkX, chunkZ, PLAYER_GENERAL_AREA_MAP_DISTANCE);
         // Tuinity end - optimise getPlayersInRange type functions
-    }
-    // Tuinity end
-
-    // Paper start - Reduce entity tracker updates on move
-    private double trackerUpdateDistanceSquared;
-    private final Int2ObjectMap<Int2ObjectMap<PlayerChunkMap.EntityTracker>> playerTrackedEntities = new Int2ObjectOpenHashMap<>();
-    private final Int2ObjectMap<Queue<Integer>> playerTrackedEntitiesRemoveQueue = new Int2ObjectOpenHashMap<>();
 
-    void flushRemoveQueue(EntityPlayer entityplayer) {
-        Queue<Integer> removeQueue = getPlayerTrackedEntityMapRemoveQueue(entityplayer.getId());
-        Int2ObjectMap<PlayerChunkMap.EntityTracker> entityMap = getPlayerTrackedEntityMap(entityplayer.getId());
-        for (Integer id = removeQueue.poll(); id != null; id = removeQueue.poll()) {
-            entityMap.remove(id);
-        }
-    }
+        // Tuinity start - use distance map to optimise entity tracker
+        for (int i = 0, len = TRACKING_RANGE_TYPES.length; i < len; ++i) {
+            com.tuinity.tuinity.util.map.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
+            int trackRange = this.entityTrackerTrackRanges[i];
 
-    void flushRemoveQueues() {
-        for (Int2ObjectMap.Entry<Queue<Integer>> entry : playerTrackedEntitiesRemoveQueue.int2ObjectEntrySet()) {
-            Int2ObjectMap<EntityTracker> entityMap = getPlayerTrackedEntityMap(entry.getKey());
-            Queue<Integer> removeQueue = entry.getValue();
-            for (Integer id = removeQueue.poll(); id != null; id = removeQueue.poll()) {
-                entityMap.remove(id);
-            }
+            trackMap.update(player, chunkX, chunkZ, Math.min(trackRange, effectiveViewDistance));
         }
+        // Tuinity end - use distance map to optimise entity tracker
     }
+    // Tuinity end
 
-    Int2ObjectMap<EntityTracker> getPlayerTrackedEntityMap(int id) {
-        return playerTrackedEntities.computeIfAbsent(id, i -> new Int2ObjectOpenHashMap<>());
-    }
-
-    Queue<Integer> getPlayerTrackedEntityMapRemoveQueue(int id) {
-        return playerTrackedEntitiesRemoveQueue.computeIfAbsent(id, i -> new java.util.ArrayDeque<>());
-    }
-
-    // Paper end
+    // Tuinity - replace with better logic
 
     public PlayerChunkMap(WorldServer worldserver, File file, DataFixer datafixer, DefinedStructureManager definedstructuremanager, Executor executor, IAsyncTaskHandler<Runnable> iasynctaskhandler, ILightAccess ilightaccess, ChunkGenerator<?> chunkgenerator, WorldLoadListener worldloadlistener, Supplier<WorldPersistentData> supplier, int i) {
         super(new File(worldserver.getWorldProvider().getDimensionManager().a(file), "region"), datafixer);
@@ -526,7 +531,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         this.m = new VillagePlace(new File(this.w, "poi"), datafixer, this.world); // Paper
         this.setViewDistance(i);
         //this.playerMobDistanceMap = this.world.paperConfig.perPlayerMobSpawns ? new com.destroystokyo.paper.util.PlayerMobDistanceMap() : null; // Paper // Tuinity - distance maps
-        this.trackerUpdateDistanceSquared = Math.pow(this.world.paperConfig.trackerUpdateDistance, 2); // Paper
+        // Tuinity - replaced with better logic
         // Tuinity start - distance maps
         com.tuinity.tuinity.util.map.PooledLinkedHashSets<EntityPlayer> sets = this.pooledEntityPlayerSets;
         this.playerViewDistanceMap = new com.tuinity.tuinity.util.map.PlayerAreaMap(sets);
@@ -609,6 +614,77 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Tuinity start - optimise getPlayersInRange type functions
         this.playerGeneralAreaMap = new com.tuinity.tuinity.util.map.PlayerAreaMap(sets);
         // Tuinity end - optimise getPlayersInRange type functions
+
+        // Tuinity start - use distance map to optimise entity tracker
+        this.playerEntityTrackerTrackMaps = new com.tuinity.tuinity.util.map.PlayerAreaMap[TRACKING_RANGE_TYPES.length];
+        this.entityTrackerTrackRanges = new int[TRACKING_RANGE_TYPES.length];
+
+        org.spigotmc.SpigotWorldConfig spigotWorldConfig = this.world.spigotConfig;
+
+        for (int ordinal = 0, len = TRACKING_RANGE_TYPES.length; ordinal < len; ++ordinal) {
+            org.spigotmc.TrackingRange.TrackingRangeType trackingRangeType = TRACKING_RANGE_TYPES[ordinal];
+            int configuredSpigotValue;
+            switch (trackingRangeType) {
+                case PLAYER:
+                    configuredSpigotValue = spigotWorldConfig.playerTrackingRange;
+                    break;
+                case ANIMAL:
+                    configuredSpigotValue = spigotWorldConfig.animalTrackingRange;
+                    break;
+                case MONSTER:
+                    configuredSpigotValue = spigotWorldConfig.monsterTrackingRange;
+                    break;
+                case MISC:
+                    configuredSpigotValue = spigotWorldConfig.miscTrackingRange;
+                    break;
+                case OTHER:
+                    configuredSpigotValue = spigotWorldConfig.otherTrackingRange;
+                    break;
+                case ENDERDRAGON:
+                    configuredSpigotValue = 10 * 16; // default is 10 chunk range // TODO check on update
+                    break;
+                default:
+                    throw new IllegalStateException("Missing case for enum " + trackingRangeType);
+            }
+
+            int trackRange = (configuredSpigotValue >>> 4) + ((configuredSpigotValue & 15) != 0 ? 1 : 0);
+            this.entityTrackerTrackRanges[ordinal] = trackRange;
+
+            this.playerEntityTrackerTrackMaps[ordinal] = new com.tuinity.tuinity.util.map.PlayerAreaMap(sets,
+                    (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                     com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {
+                        Chunk chunk = PlayerChunkMap.this.world.getChunkProvider().getChunkAtIfLoadedMainThreadNoCache(rangeX, rangeZ);
+                        if (chunk == null) {
+                            return;
+                        }
+                        Entity[] entities = chunk.entities.getRawData();
+                        for (int index = 0, length = chunk.entities.size(); index < length; ++index) {
+                            Entity entity = entities[index];
+                            if (entity.trackingRangeType != trackingRangeType) {
+                                continue;
+                            }
+                            entity.playersInTrackRange = newState;
+                        }
+                    },
+                    (EntityPlayer player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                     com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newState) -> {
+                        Chunk chunk = PlayerChunkMap.this.world.getChunkProvider().getChunkAtIfCachedImmediately(rangeX, rangeZ);
+                        if (chunk == null) {
+                            return;
+                        }
+                        Entity[] entities = chunk.entities.getRawData();
+                        for (int index = 0, length = chunk.entities.size(); index < length; ++index) {
+                            Entity entity = entities[index];
+                            if (entity.trackingRangeType != trackingRangeType) {
+                                continue;
+                            }
+                            entity.playersInTrackRange = newState;
+                        }
+                    }
+            );
+        }
+
+        // Tuinity end - use distance map to optimise entity tracker
     }
 
     public void updatePlayerMobTypeMap(Entity entity) {
@@ -1831,29 +1907,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     public void movePlayer(EntityPlayer entityplayer) {
-        // Paper start
-        // ObjectIterator objectiterator = this.trackedEntities.values().iterator();
-        ObjectIterator objectiterator;
-
-        if (MinecraftServer.currentTick - entityplayer.lastTrackedTick >= 20
-            || entityplayer.lastTrackedPosition.distanceSquared(entityplayer.getPositionVector()) >= trackerUpdateDistanceSquared) {
-            entityplayer.lastTrackedPosition = entityplayer.getPositionVector();
-            entityplayer.lastTrackedTick = MinecraftServer.currentTick;
-            objectiterator = this.trackedEntities.values().iterator(); // Update all entity trackers
-        } else {
-            objectiterator = getPlayerTrackedEntityMap(entityplayer.getId()).values().iterator(); // Only update entity trackers for already tracked entities
-        }
-        // Paper end
-        while (objectiterator.hasNext()) {
-            PlayerChunkMap.EntityTracker playerchunkmap_entitytracker = (PlayerChunkMap.EntityTracker) objectiterator.next();
-
-            if (playerchunkmap_entitytracker.tracker == entityplayer) {
-                playerchunkmap_entitytracker.track(this.world.getPlayers());
-            } else {
-                playerchunkmap_entitytracker.updatePlayer(entityplayer);
-            }
-        }
-        flushRemoveQueues(); // Paper
+        // Tuinity - delay this logic for the entity tracker tick, no need to duplicate it
 
         int i = MathHelper.floor(entityplayer.locX()) >> 4;
         int j = MathHelper.floor(entityplayer.locZ()) >> 4;
@@ -1971,15 +2025,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                         EntityPlayer entityplayer = (EntityPlayer) entity;
 
                         this.a(entityplayer, true);
-                        ObjectIterator objectiterator = this.trackedEntities.values().iterator();
-
-                        while (objectiterator.hasNext()) {
-                            PlayerChunkMap.EntityTracker playerchunkmap_entitytracker1 = (PlayerChunkMap.EntityTracker) objectiterator.next();
-
-                            if (playerchunkmap_entitytracker1.tracker != entityplayer) {
-                                playerchunkmap_entitytracker1.updatePlayer(entityplayer);
-                            }
-                        }
+                        // Tuinity - this can be delayed until tracker tick
                     }
 
                 }
@@ -2000,26 +2046,58 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
                 playerchunkmap_entitytracker.clear(entityplayer);
             }
-            // Paper start
-            playerTrackedEntities.remove(entityplayer.getId());
-            playerTrackedEntitiesRemoveQueue.remove(entityplayer.getId());
-            // Paper end
+            // Tuinity - replaced with better logic
         }
 
         PlayerChunkMap.EntityTracker playerchunkmap_entitytracker1 = (PlayerChunkMap.EntityTracker) this.trackedEntities.remove(entity.getId());
 
         if (playerchunkmap_entitytracker1 != null) {
             playerchunkmap_entitytracker1.a();
-            // Paper start
-            for (EntityPlayer player : playerchunkmap_entitytracker1.trackedPlayers) {
-                getPlayerTrackedEntityMap(player.getId()).remove(playerchunkmap_entitytracker1.tracker.getId());
-            }
-            // Paper end
+            // Tuinity - replaced with better logic
         }
         entity.tracker = null; // Paper - We're no longer tracked
     }
 
+    private final void processTrackQueue() {
+        this.world.timings.tracker1.startTiming();
+        try {
+            Entity[] entities = this.world.loadedEntities.getRawData();
+            for (int i = 0, len = this.world.loadedEntities.size(); i < len; ++i) {
+                Entity tracked = entities[i];
+                // update tracker entry
+                EntityTracker tracker = this.trackedEntities.get(tracked.getId());
+                if (tracker == null) {
+                    continue;
+                }
+                tracker.updatePlayers(tracked.playersInTrackRange);
+            }
+        } finally {
+            this.world.timings.tracker1.stopTiming();
+        }
+
+
+        this.world.timings.tracker2.startTiming();
+        try {
+            Entity[] entities = this.world.loadedEntities.getRawData();
+            for (int i = 0, len = this.world.loadedEntities.size(); i < len; ++i) {
+                Entity tracked = entities[i];
+                EntityTracker tracker = this.trackedEntities.get(tracked.getId());
+                if (tracker != null) {
+                    tracker.trackerEntry.tick();
+                }
+            }
+        } finally {
+            this.world.timings.tracker2.stopTiming();
+        }
+    }
+
     protected void g() {
+        // Tuinity start - optimized tracker
+        if (true) {
+            this.processTrackQueue();
+            return;
+        }
+        // Tuinity end - optimized tracker
         List<EntityPlayer> list = Lists.newArrayList();
         List<EntityPlayer> list1 = this.world.getPlayers();
 
@@ -2055,7 +2133,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             }
             world.timings.tracker2.stopTiming(); // Paper
         }
-        flushRemoveQueues(); // Paper
+        // Tuinity - replaced with better logic
 
     }
 
@@ -2088,24 +2166,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         PacketDebug.a(this.world, chunk.getPos());
         List<Entity> list = Lists.newArrayList();
         List<Entity> list1 = Lists.newArrayList();
-        ObjectIterator objectiterator = this.trackedEntities.values().iterator();
-
-        while (objectiterator.hasNext()) {
-            PlayerChunkMap.EntityTracker playerchunkmap_entitytracker = (PlayerChunkMap.EntityTracker) objectiterator.next();
-            Entity entity = playerchunkmap_entitytracker.tracker;
-
-            if (entity != entityplayer && entity.chunkX == chunk.getPos().x && entity.chunkZ == chunk.getPos().z) {
-                playerchunkmap_entitytracker.updatePlayer(entityplayer);
-                if (entity instanceof EntityInsentient && ((EntityInsentient) entity).getLeashHolder() != null) {
-                    list.add(entity);
-                }
-
-                if (!entity.getPassengers().isEmpty()) {
-                    list1.add(entity);
-                }
-            }
-        }
-        flushRemoveQueue(entityplayer); // Paper
+        // Tuinity - this can be delayed until tracker tick
+        // Tuinity - replaced with better logic
 
         Iterator iterator;
         Entity entity1;
@@ -2143,7 +2205,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     public class EntityTracker {
 
-        private final EntityTrackerEntry trackerEntry;
+        final EntityTrackerEntry trackerEntry; // Tuinity - private -> package private
         private final Entity tracker;
         private final int trackingDistance;
         private SectionPosition e;
@@ -2153,6 +2215,43 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new java.util.HashMap<>();
         public Set<EntityPlayer> trackedPlayers = trackedPlayerMap.keySet();
 
+        // Tuinity start - use distance map to optimise tracker
+
+        com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> lastTrackerCandidates;
+
+        final void updatePlayers(com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> newTrackerCandidates) {
+            com.tuinity.tuinity.util.map.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<EntityPlayer> oldTrackerCandidates = this.lastTrackerCandidates;
+            this.lastTrackerCandidates = newTrackerCandidates;
+
+            if (newTrackerCandidates != null) {
+                Object[] rawData = newTrackerCandidates.getBackingSet();
+                for (int i = 0, len = rawData.length; i < len; ++i) {
+                    Object raw = rawData[i];
+                    if (!(raw instanceof EntityPlayer)) {
+                        continue;
+                    }
+                    EntityPlayer player = (EntityPlayer)raw;
+                    this.updatePlayer(player);
+                }
+            }
+
+            if (oldTrackerCandidates == newTrackerCandidates) {
+                // this is likely the case.
+                // means there has been no range changes, so we can just use the above for tracking.
+                return;
+            }
+
+            // stuff could have been removed, so we need to check the trackedPlayers set
+            // for players that were removed
+
+            for (EntityPlayer player : this.trackedPlayers.toArray(new EntityPlayer[0])) {
+                if (newTrackerCandidates == null || !newTrackerCandidates.contains(player)) {
+                    this.updatePlayer(player);
+                }
+            }
+        }
+        // Tuinity end - use distance map to optimise tracker
+
         public EntityTracker(Entity entity, int i, int j, boolean flag) {
             this.trackerEntry = new EntityTrackerEntry(PlayerChunkMap.this.world, entity, j, flag, this::broadcast, trackedPlayerMap); // CraftBukkit // Paper
             this.tracker = entity;
@@ -2202,7 +2301,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             org.spigotmc.AsyncCatcher.catchOp("player tracker clear"); // Spigot
             if (this.trackedPlayers.remove(entityplayer)) {
                 this.trackerEntry.a(entityplayer);
-                getPlayerTrackedEntityMap(entityplayer.getId()).remove(this.tracker.getId()); // Paper
+                // Tuinity - replaced with better logic
             }
 
         }
@@ -2242,11 +2341,11 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
                     if (flag1 && this.trackedPlayerMap.putIfAbsent(entityplayer, true) == null) { // Paper
                         this.trackerEntry.b(entityplayer);
-                        getPlayerTrackedEntityMap(entityplayer.getId()).put(this.tracker.getId(), this); // Paper
+                        // Tuinity - replaced with better logic
                     }
                 } else if (this.trackedPlayers.remove(entityplayer)) {
                     this.trackerEntry.a(entityplayer);
-                    getPlayerTrackedEntityMapRemoveQueue(entityplayer.getId()).add(this.tracker.getId()); // Paper
+                    // Tuinity - replaced with better logic
                 }
 
             }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 2bffeb80bd6fa8e3de02dc3d71e755ed7809f9cf..2b6fbd42199ded9cc18fd8c80cceeef8f8bdde58 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1209,9 +1209,9 @@ public class WorldServer extends World {
 
     public void chunkCheck(Entity entity) {
         this.getMethodProfiler().enter("chunkCheck");
-        int i = MathHelper.floor(entity.locX() / 16.0D);
+        int i = MathHelper.floor(entity.locX() / 16.0D); final int newChunkX = i; // Tuinity - diff on change, i = entity chunk x
         int j =  Math.min(15, Math.max(0, MathHelper.floor(entity.locY() / 16.0D))); // Paper - stay consistent with chunk add/remove behavior;
-        int k = MathHelper.floor(entity.locZ() / 16.0D);
+        int k = MathHelper.floor(entity.locZ() / 16.0D); final int newChunkZ = k; // Tuinity - diff on change, k = entity chunk z
 
         if (!entity.inChunk || entity.chunkX != i || entity.chunkY != j || entity.chunkZ != k) {
             if (entity.inChunk && this.isChunkLoaded(entity.chunkX, entity.chunkZ)) {
@@ -1223,6 +1223,8 @@ public class WorldServer extends World {
             } else {
                 this.getChunkAt(i, k).a(entity);
             }
+            entity.playersInTrackRange = this.getChunkProvider().playerChunkMap.playerEntityTrackerTrackMaps[entity.trackingRangeType.ordinal()] // Tuinity - use distance map to optimise tracker
+                    .getObjectsInRange(com.tuinity.tuinity.util.Util.getCoordinateKey(newChunkX, newChunkZ)); // Tuinity - use distance map to optimise tracker
         }
 
         this.getMethodProfiler().exit();
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
index 46c33e6917e6e81afcd85f1a15a841ce8ba333fc..1516cdbbc41d771b123f2bd2547d2a4ca50d15ac 100644
--- a/src/main/java/org/spigotmc/TrackingRange.java
+++ b/src/main/java/org/spigotmc/TrackingRange.java
@@ -47,4 +47,43 @@ public class TrackingRange
             return config.otherTrackingRange;
         }
     }
+
+    // Tuinity start - optimise entity tracking
+    // copied from above, TODO check on update
+    public static TrackingRangeType getTrackingRangeType(Entity entity)
+    {
+        if ( entity instanceof EntityPlayer )
+        {
+            return TrackingRangeType.PLAYER;
+            // Paper start - Simplify and set water mobs to animal tracking range
+        }
+        switch (entity.activationType) {
+            case RAIDER:
+            case MONSTER:
+                return TrackingRangeType.MONSTER;
+            case WATER:
+            case ANIMAL:
+                return TrackingRangeType.ANIMAL;
+            case MISC:
+        }
+        if ( entity instanceof EntityItemFrame || entity instanceof EntityPainting || entity instanceof EntityItem || entity instanceof EntityExperienceOrb )
+        // Paper end
+        {
+            return TrackingRangeType.MISC;
+        } else
+        {
+            if (entity instanceof EntityEnderDragon) return TrackingRangeType.ENDERDRAGON; // Paper - enderdragon is exempt
+            return TrackingRangeType.OTHER;
+        }
+    }
+
+    public static enum TrackingRangeType {
+        PLAYER,
+        ANIMAL,
+        MONSTER,
+        MISC,
+        OTHER,
+        ENDERDRAGON;
+    }
+    // Tuinity end - optimise entity tracking
 }
